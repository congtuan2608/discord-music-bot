import { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } from "@discordjs/voice";

export default async function nextSong(interaction) {
  const { member, guild } = interaction;

  try {
    // Ki·ªÉm tra xem interaction ƒë√£ tr·∫£ l·ªùi hay deferred ch∆∞a
    if (!interaction.replied && !interaction.deferred) {
      await interaction.deferReply();
    }

    // L·∫•y h√†ng ƒë·ª£i nh·∫°c c·ªßa server
    let queue = global.queueMap.get(guild.id);
    if (!queue || queue.length === 0) {
      global.queueMap.delete(guild.id);
      global.playerMap.delete(guild.id);
      if (!interaction.replied) {
        await interaction.followUp("üéµ Tao ƒë√£ h√°t h·∫øt r·ªìi ƒë√≥, ƒë·ª´ng √©p kaoo n·ªØa!");
      }
      return;
    }

    // L·∫•y b√†i h√°t hi·ªán t·∫°i v√† x√≥a n√≥ kh·ªèi queue
    const currentSong = queue.shift();

    // K·∫øt n·ªëi v√†o k√™nh voice
    const connection = joinVoiceChannel({
      channelId: member.voice.channel.id,
      guildId: guild.id,
      adapterCreator: guild.voiceAdapterCreator,
    });

    // T·∫°o audio player v√† l∆∞u n√≥ v√†o playerMap
    const player = createAudioPlayer();
    global.playerMap.set(guild.id, player);

    // ƒêƒÉng k√Ω player v√†o connection
    connection.subscribe(player);

    // T·∫°o audio resource t·ª´ stream c·ªßa b√†i h√°t
    const resource = createAudioResource(currentSong.stream.stream, { inputType: currentSong.stream.type });
    player.play(resource);

    // Th√¥ng b√°o cho ng∆∞·ªùi d√πng b√†i h√°t ƒëang ph√°t
    if (!interaction.replied) {
      await interaction.followUp(`üé∂ Kaoo ƒëang h√°t b√†i: ${currentSong.title}`);
    }
    console.log(`üé∂ Kaoo ƒëang h√°t b√†i: ${currentSong.title}`);

    // Khi b√†i h√°t k·∫øt th√∫c, ph√°t b√†i ti·∫øp theo
    player.on(AudioPlayerStatus.Idle, () => {
      nextSong(interaction);
    });

    // X·ª≠ l√Ω l·ªói
    player.on("error", (error) => {
      console.error(error);
      if (!interaction.replied) {
        interaction.followUp(`‚ùå L·ªói ph√°t nh·∫°c: ${error.message}`);
      }
      nextSong(interaction); // G·ªçi l·∫°i next song sau khi l·ªói
    });
  } catch (error) {
    console.error("Error in nextSong:", error);
    if (!interaction.replied) {
      await interaction.deferReply(); // ƒê·∫£m b·∫£o deferred reply n·∫øu l·ªói x·∫£y ra
    }
    if (!interaction.replied) {
      interaction.followUp(`C√≥ l·ªói x·∫£y ra: ${error.message}`);
    }
  }
}
